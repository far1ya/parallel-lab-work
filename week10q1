#include <iostream>
#include <cstdlib>
#include <ctime>
#include <omp.h>

using namespace std;

// Function to perform the partition operation for Quick Sort
int partition(int* arr, int low, int high) {
    int pivot = arr[high];  // Pivot is chosen to be the last element
    int i = low - 1;  // Index of the smaller element
    
    for (int j = low; j < high; ++j) {
        if (arr[j] <= pivot) {
            ++i;
            swap(arr[i], arr[j]);
        }
    }
    swap(arr[i + 1], arr[high]);
    return i + 1;
}

// Recursive Quick Sort function
void quickSort(int* arr, int low, int high) {
    if (low < high) {
        int pi = partition(arr, low, high);
        
        // Parallelizing the recursive calls
        #pragma omp parallel sections
        {
            #pragma omp section
            quickSort(arr, low, pi - 1);  // Sort the left partition
            
            #pragma omp section
            quickSort(arr, pi + 1, high);  // Sort the right partition
        }
    }
}

// Function to print the array
void printArray(int* arr, int size) {
    for (int i = 0; i < size; ++i) {
        cout << arr[i] << " ";
    }
    cout << endl;
}

// Function to check if the array is sorted
bool isSorted(int* arr, int size) {
    for (int i = 1; i < size; ++i) {
        if (arr[i - 1] > arr[i]) {
            return false;
        }
    }
    return true;
}

int main() {
    const int N = 1000000;  // Size of the array
    int* array = new int[N];
    
    // Seed for random number generation
    srand(time(0));

    // Initialize the array with random integers
    for (int i = 0; i < N; ++i) {
        array[i] = rand() % 10000;
    }

    // Print the unsorted array (optional)
    // cout << "Unsorted array:" << endl;
    // printArray(array, N);

    // Set the number of threads for OpenMP
    int num_threads = 4;  // Experiment with different values
    omp_set_num_threads(num_threads);

    // Time the parallel Quick Sort
    double start_time = omp_get_wtime();
    
    quickSort(array, 0, N - 1);

    double end_time = omp_get_wtime();
    double parallel_time = end_time - start_time;

    // Print the sorted array (optional)
    // cout << "Sorted array using Parallel Quick Sort:" << endl;
    // printArray(array, N);

    // Check if the array is sorted
    if (isSorted(array, N)) {
        cout << "Array is sorted correctly!" << endl;
    } else {
        cout << "Array is NOT sorted!" << endl;
    }

    cout << "Parallel Quick Sort took: " << parallel_time << " seconds" << endl;

    // Compare with sequential Quick Sort
    int* seqArray = new int[N];
    // Copy the original array
    memcpy(seqArray, array, sizeof(int) * N);

    start_time = omp_get_wtime();
    quickSort(seqArray, 0, N - 1);  // Sequential execution
    end_time = omp_get_wtime();
    double sequential_time = end_time - start_time;

    // Print performance comparison
    cout << "Sequential Quick Sort took: " << sequential_time << " seconds" << endl;
    cout << "Speedup = " << sequential_time / parallel_time << endl;

    // Cleanup
    delete[] array;
    delete[] seqArray;

    return 0;
}

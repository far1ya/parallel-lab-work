#include <stdio.h>
#include <stdlib.h>
#include <mpi.h>

#define N 4  // Matrix size (N x N), adjust as needed

void gaussian_elimination(double *matrix, int n, int rank, int size) {
    int i, j, k;
    int row_start, row_end;
    double factor;

    // Row distribution for parallel computation
    int rows_per_process = n / size;
    row_start = rank * rows_per_process;
    row_end = (rank == size - 1) ? n : row_start + rows_per_process;

    // Forward elimination
    for (k = 0; k < n; k++) {
        // Broadcast pivot row
        if (rank == 0) {
            for (i = 1; i < size; i++) {
                MPI_Send(&matrix[k * n], n, MPI_DOUBLE, i, 0, MPI_COMM_WORLD);
            }
        } else {
            MPI_Recv(&matrix[k * n], n, MPI_DOUBLE, 0, 0, MPI_COMM_WORLD, MPI_STATUS_IGNORE);
        }

        // Perform elimination on local rows
        for (i = row_start; i < row_end; i++) {
            if (i > k) {
                factor = matrix[i * n + k] / matrix[k * n + k];
                for (j = k; j < n; j++) {
                    matrix[i * n + j] -= factor * matrix[k * n + j];
                }
            }
        }

        // Synchronize all processes before moving to next row
        MPI_Barrier(MPI_COMM_WORLD);
    }

    // Back substitution can also be parallelized similarly, but we will keep it simple
    if (rank == 0) {
        for (k = n - 1; k >= 0; k--) {
            for (i = 0; i < n; i++) {
                if (i != k) {
                    matrix[i * n + n - 1] -= matrix[i * n + k] * matrix[k * n + n - 1];
                }
            }
        }
    }
}

int main(int argc, char *argv[]) {
    int rank, size;
    double matrix[N][N+1]; // Augmented matrix (N x N for coefficients, N+1 for the right-hand side)
    int i, j;

    // Initialize MPI
    MPI_Init(&argc, &argv);
    MPI_Comm_rank(MPI_COMM_WORLD, &rank);
    MPI_Comm_size(MPI_COMM_WORLD, &size);

    // Initialize matrix with some values (this can be read from input or generated)
    if (rank == 0) {
        double temp_matrix[N][N+1] = {
            {2, -1, 1, 3, 9},
            {-1, 2, 3, 1, 8},
            {1, 3, 3, 2, 13},
            {3, -1, -2, 2, 5}
        };
        for (i = 0; i < N; i++) {
            for (j = 0; j < N+1; j++) {
                matrix[i][j] = temp_matrix[i][j];
            }
        }
    }

    // Perform Gaussian elimination
    gaussian_elimination((double *)matrix, N, rank, size);

    // After Gaussian elimination, print the results (only on rank 0)
    if (rank == 0) {
        printf("Resulting Matrix after Gaussian Elimination:\n");
        for (i = 0; i < N; i++) {
            for (j = 0; j < N+1; j++) {
                printf("%lf ", matrix[i][j]);
            }
            printf("\n");
        }
    }

    // Finalize MPI
    MPI_Finalize();
    return 0;
}


#include <stdio.h>
#include <stdlib.h>
#include <mpi.h>

int main(int argc, char *argv[]) {
    int rank, size;
    int N = 1000000;  // Size of the array
    int *arr = NULL;
    int local_sum = 0;
    int total_sum = 0;
    int chunk_size;
    
    // Initialize the MPI environment
    MPI_Init(&argc, &argv);

    // Get the rank of the process and the number of processes
    MPI_Comm_rank(MPI_COMM_WORLD, &rank);
    MPI_Comm_size(MPI_COMM_WORLD, &size);

    // Ensure that we have at least 1 process
    if (size < 1) {
        printf("At least one process is required.\n");
        MPI_Abort(MPI_COMM_WORLD, 1);
    }

    // Determine the chunk size for each process
    chunk_size = N / size;

    // Allocate memory for the array in process 0
    if (rank == 0) {
        arr = (int *)malloc(N * sizeof(int));
        // Initialize the array with values (e.g., 1, 2, 3, ...)
        for (int i = 0; i < N; i++) {
            arr[i] = 1;  // Each element in the array is 1
        }
    }

    // Allocate memory for the local portion of the array for each process
    int *local_arr = (int *)malloc(chunk_size * sizeof(int));

    // Scatter the array to all processes
    MPI_Scatter(arr, chunk_size, MPI_INT, local_arr, chunk_size, MPI_INT, 0, MPI_COMM_WORLD);

    // Each process computes the sum of its local portion
    for (int i = 0; i < chunk_size; i++) {
        local_sum += local_arr[i];
    }

    // Use MPI_Reduce to gather the local sums and compute the total sum
    MPI_Reduce(&local_sum, &total_sum, 1, MPI_INT, MPI_SUM, 0, MPI_COMM_WORLD);

    // Process 0 prints the total sum
    if (rank == 0) {
        printf("Total sum of array: %d\n", total_sum);
        free(arr);  // Free the array in process 0
    }

    // Free the local array in each process
    free(local_arr);

    // Finalize the MPI environment
    MPI_Finalize();

    return 0;
}

#include <stdio.h>
#include <stdlib.h>
#include <mpi.h>
#include <math.h>

void merge(int arr[], int left, int mid, int right) {
    int n1 = mid - left + 1;
    int n2 = right - mid;

    int leftArr[n1], rightArr[n2];

    for (int i = 0; i < n1; i++)
        leftArr[i] = arr[left + i];
    for (int j = 0; j < n2; j++)
        rightArr[j] = arr[mid + 1 + j];

    int i = 0, j = 0, k = left;
    while (i < n1 && j < n2) {
        if (leftArr[i] <= rightArr[j]) {
            arr[k] = leftArr[i];
            i++;
        } else {
            arr[k] = rightArr[j];
            j++;
        }
        k++;
    }

    while (i < n1) {
        arr[k] = leftArr[i];
        i++;
        k++;
    }

    while (j < n2) {
        arr[k] = rightArr[j];
        j++;
        k++;
    }
}

void merge_sort(int arr[], int left, int right) {
    if (left < right) {
        int mid = left + (right - left) / 2;

        merge_sort(arr, left, mid);
        merge_sort(arr, mid + 1, right);

        merge(arr, left, mid, right);
    }
}

int main(int argc, char **argv) {
    int rank, size;
    int *arr;
    int n = 1000000;
    
    MPI_Init(&argc, &argv);
    MPI_Comm_rank(MPI_COMM_WORLD, &rank);
    MPI_Comm_size(MPI_COMM_WORLD, &size);

    if (rank == 0) {
        arr = (int *)malloc(n * sizeof(int));
        // Initialize array with random numbers
        for (int i = 0; i < n; i++) {
            arr[i] = rand() % 1000000;
        }
    }

    // Distribute data to all processes
    int local_n = n / size;
    int *local_arr = (int *)malloc(local_n * sizeof(int));
    MPI_Scatter(arr, local_n, MPI_INT, local_arr, local_n, MPI_INT, 0, MPI_COMM_WORLD);

    // Sort the local portion
    merge_sort(local_arr, 0, local_n - 1);

    // Gather the sorted portions from all processes
    MPI_Gather(local_arr, local_n, MPI_INT, arr, local_n, MPI_INT, 0, MPI_COMM_WORLD);

    if (rank == 0) {
        // Merge all local sorted arrays
        int step;
        for (step = size; step < n; step = step * 2) {
            for (int i = 0; i < n - step; i = i + step * 2) {
                merge(arr, i, i + step - 1, fmin(i + 2 * step - 1, n - 1));
            }
        }

        // Printing final result (optional)
        // printf("Sorted Array:\n");
        // for (int i = 0; i < n; i++) printf("%d ", arr[i]);
    }

    MPI_Finalize();
    return 0;
}


#include <stdio.h>
#include <stdlib.h>
#include <omp.h>
#include <time.h>

#define MAX_VAL 100  // Assume the array values are in the range [0, MAX_VAL-1]

void count_frequencies(int *arr, int n, int *freq) {
    #pragma omp parallel for
    for (int i = 0; i < n; i++) {
        #pragma omp atomic
        freq[arr[i]]++;  // Increment the frequency of the current value
    }
}

int main() {
    int n = 1000000;  // Size of the array (1 million elements)
    int *arr = (int *)malloc(n * sizeof(int));
    int *freq = (int *)calloc(MAX_VAL, sizeof(int));  // Frequency array for counting
    double start_time, end_time;

    // Initialize the array with random values in the range [0, MAX_VAL-1]
    srand(time(NULL));
    for (int i = 0; i < n; i++) {
        arr[i] = rand() % MAX_VAL;
    }

    // Measure time for parallel counting
    start_time = omp_get_wtime();
    
    count_frequencies(arr, n, freq);

    end_time = omp_get_wtime();
    printf("Parallel execution time: %f seconds\n", end_time - start_time);

    // Optionally print the frequency of the first few values
    for (int i = 0; i < MAX_VAL; i++) {
        if (freq[i] > 0) {
            printf("Value %d occurs %d times.\n", i, freq[i]);
        }
    }

    // Sequential version for comparison (no OpenMP)
    int *seq_freq = (int *)calloc(MAX_VAL, sizeof(int));
    start_time = omp_get_wtime();

    // Sequential frequency counting
    for (int i = 0; i < n; i++) {
        seq_freq[arr[i]]++;
    }

    end_time = omp_get_wtime();
    printf("Sequential execution time: %f seconds\n", end_time - start_time);

    // Free allocated memory
    free(arr);
    free(freq);
    free(seq_freq);

    return 0;
}



#include <stdio.h>
#include <string.h>
#include <mpi.h>

#define MAX_MESSAGE_LENGTH 100

int main(int argc, char *argv[]) {
    int rank, size;
    char message[MAX_MESSAGE_LENGTH];
    MPI_Status status;

    // Initialize the MPI environment
    MPI_Init(&argc, &argv);

    // Get the rank of the process and the size of the communicator
    MPI_Comm_rank(MPI_COMM_WORLD, &rank);
    MPI_Comm_size(MPI_COMM_WORLD, &size);

    // Ensure there are at least 2 processes
    if (size < 2) {
        printf("This program requires at least 2 processes.\n");
        MPI_Abort(MPI_COMM_WORLD, 1);
    }

    if (rank == 0) {
        // Process 0 sends a greeting message to Process 1
        strcpy(message, "Hello from Process 0!");
        printf("Process 0 sending: %s\n", message);
        MPI_Send(message, strlen(message) + 1, MPI_CHAR, 1, 0, MPI_COMM_WORLD);

        // Process 0 receives the modified message from Process 1
        MPI_Recv(message, MAX_MESSAGE_LENGTH, MPI_CHAR, 1, 0, MPI_COMM_WORLD, &status);
        printf("Process 0 received: %s\n", message);
    } else if (rank == 1) {
        // Process 1 receives the greeting message from Process 0
        MPI_Recv(message, MAX_MESSAGE_LENGTH, MPI_CHAR, 0, 0, MPI_COMM_WORLD, &status);
        printf("Process 1 received: %s\n", message);

        // Process 1 modifies the message
        strcat(message, " -- Modified by Process 1.");
        printf("Process 1 sending: %s\n", message);

        // Process 1 sends the modified message back to Process 0
        MPI_Send(message, strlen(message) + 1, MPI_CHAR, 0, 0, MPI_COMM_WORLD);
    }

    // Finalize the MPI environment
    MPI_Finalize();

    return 0;
}

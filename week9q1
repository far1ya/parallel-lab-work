#include <iostream>
#include <vector>
#include <cmath>
#include <mpi.h>

using namespace std;

// Function to perform the Gauss-Seidel iteration step for each process
void gaussSeidelIteration(int rank, int size, vector<vector<double>>& A, vector<double>& x, vector<double>& b, int n, int numIterations) {
    int rowsPerProcess = n / size;
    
    for (int iter = 0; iter < numIterations; ++iter) {
        // Each process updates its own portion of the solution vector x
        for (int i = rank * rowsPerProcess; i < (rank + 1) * rowsPerProcess; ++i) {
            double sum = b[i];
            for (int j = 0; j < n; ++j) {
                if (i != j) {
                    sum -= A[i][j] * x[j];
                }
            }
            x[i] = sum / A[i][i];
        }

        // Synchronize all processes after each iteration to ensure they all have the updated solution vector
        MPI_Barrier(MPI_COMM_WORLD);  // Synchronize processes
        
        // Broadcast the updated solution vector to all processes
        MPI_Bcast(&x[0], n, MPI_DOUBLE, 0, MPI_COMM_WORLD);
    }
}

int main(int argc, char* argv[]) {
    int rank, size;
    int n = 4;  // Size of the system (n x n matrix)
    int numIterations = 10;  // Number of Gauss-Seidel iterations

    MPI_Init(&argc, &argv);  // Initialize MPI
    MPI_Comm_rank(MPI_COMM_WORLD, &rank);  // Get the rank of the current process
    MPI_Comm_size(MPI_COMM_WORLD, &size);  // Get the number of processes

    // Matrix A and vector b (only root process initializes)
    vector<vector<double>> A(n, vector<double>(n));  // Coefficient matrix
    vector<double> b(n);  // Constant vector
    vector<double> x(n, 0.0);  // Solution vector (initial guess is zero)

    if (rank == 0) {
        // Initialize matrix A and vector b (Example system of equations)
        A = {{4, -1, 0, 0},
             {-1, 4, -1, 0},
             {0, -1, 4, -1},
             {0, 0, -1, 3}};
        b = {15, 10, 10, 10};
    }

    // Perform Gauss-Seidel iterations
    gaussSeidelIteration(rank, size, A, x, b, n, numIterations);

    // Output the final solution vector
    if (rank == 0) {
        cout << "Solution vector x: ";
        for (int i = 0; i < n; ++i) {
            cout << x[i] << " ";
        }
        cout << endl;
    }

    MPI_Finalize();  // Finalize MPI
    return 0;
}
